/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_TEST_Test_Service_PROXY_BASE_HPP_
#define V0_TEST_Test_Service_PROXY_BASE_HPP_

#include <v0/test/TestService.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>

#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace test {

class TestServiceProxyBase
    : virtual public CommonAPI::Proxy {
public:

    typedef std::function<void(const CommonAPI::CallStatus&, const bool&)> Test_boolAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int8_t&)> Test_int8AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int16_t&)> Test_int16AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int32_t&)> Test_int32AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const int64_t&)> Test_int64AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint8_t&)> Test_uint8AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint16_t&)> Test_uint16AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&)> Test_uint32AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint64_t&)> Test_uint64AsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const double&)> Test_doubleAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const float&)> Test_floatAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> Test_utf16le_dynamic_length_stringAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> Test_utf16be_dynamic_length_stringAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> Test_utf8_dynamic_length_stringAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> Test_utf16le_fixed_length_stringAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> Test_utf16be_fixed_length_stringAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::string&)> Test_utf8_fixed_length_stringAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const TestService::AllPrimitiveDataTypes&)> Test_structAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector< uint32_t >&)> Test_fixed_length_arrayAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector< uint32_t >&)> Test_dynamic_length_1_byte_arrayAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector< uint32_t >&)> Test_dynamic_length_2_bytes_arrayAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const std::vector< uint32_t >&)> Test_dynamic_length_4_bytes_arrayAsyncCallback;

    virtual void test_bool(bool _flag, CommonAPI::CallStatus &_internalCallStatus, bool &_retflag, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_boolAsync(const bool &_flag, Test_boolAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_int8(int8_t _param, CommonAPI::CallStatus &_internalCallStatus, int8_t &_retcode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_int8Async(const int8_t &_param, Test_int8AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_int16(int16_t _param, CommonAPI::CallStatus &_internalCallStatus, int16_t &_retcode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_int16Async(const int16_t &_param, Test_int16AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_int32(int32_t _param, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retcode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_int32Async(const int32_t &_param, Test_int32AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_int64(int64_t _param, CommonAPI::CallStatus &_internalCallStatus, int64_t &_retcode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_int64Async(const int64_t &_param, Test_int64AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_uint8(uint8_t _param, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_retcode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_uint8Async(const uint8_t &_param, Test_uint8AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_uint16(uint16_t _param, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_retcode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_uint16Async(const uint16_t &_param, Test_uint16AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_uint32(uint32_t _param, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_retcode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_uint32Async(const uint32_t &_param, Test_uint32AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_uint64(uint64_t _param, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_retcode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_uint64Async(const uint64_t &_param, Test_uint64AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_double(double _param, CommonAPI::CallStatus &_internalCallStatus, double &_retcode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_doubleAsync(const double &_param, Test_doubleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_float(float _param, CommonAPI::CallStatus &_internalCallStatus, float &_retcode, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_floatAsync(const float &_param, Test_floatAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_utf16le_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_utf16le_dynamic_length_stringAsync(const std::string &_param, Test_utf16le_dynamic_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_utf16be_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_utf16be_dynamic_length_stringAsync(const std::string &_param, Test_utf16be_dynamic_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_utf8_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_utf8_dynamic_length_stringAsync(const std::string &_param, Test_utf8_dynamic_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_utf16le_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_utf16le_fixed_length_stringAsync(const std::string &_param, Test_utf16le_fixed_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_utf16be_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_utf16be_fixed_length_stringAsync(const std::string &_param, Test_utf16be_fixed_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_utf8_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_utf8_fixed_length_stringAsync(const std::string &_param, Test_utf8_fixed_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_struct(TestService::AllPrimitiveDataTypes _request, CommonAPI::CallStatus &_internalCallStatus, TestService::AllPrimitiveDataTypes &_response, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_structAsync(const TestService::AllPrimitiveDataTypes &_request, Test_structAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_fixed_length_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_fixed_length_arrayAsync(const std::vector< uint32_t > &_param, Test_fixed_length_arrayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_dynamic_length_1_byte_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_dynamic_length_1_byte_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_1_byte_arrayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_dynamic_length_2_bytes_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_dynamic_length_2_bytes_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_2_bytes_arrayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void test_dynamic_length_4_bytes_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> test_dynamic_length_4_bytes_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_4_bytes_arrayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /**
     * @invariant Fire And Forget
     */
    virtual void test_fire_and_forget_uint64(uint64_t _param, CommonAPI::CallStatus &_internalCallStatus) = 0;

    virtual std::future<void> getCompletionFuture() = 0;
};

} // namespace test
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_TEST_Test_Service_PROXY_BASE_HPP_
