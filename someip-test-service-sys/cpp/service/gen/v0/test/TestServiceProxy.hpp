/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_TEST_Test_Service_PROXY_HPP_
#define V0_TEST_Test_Service_PROXY_HPP_

#include <v0/test/TestServiceProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif


#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace test {

template <typename ... _AttributeExtensions>
class TestServiceProxy
    : virtual public TestService,
      virtual public TestServiceProxyBase,
      virtual public _AttributeExtensions... {
public:
    TestServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~TestServiceProxy();

    typedef ::v0::test::TestService InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Calls test_bool with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_bool(bool _flag, CommonAPI::CallStatus &_internalCallStatus, bool &_retflag, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_bool with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_boolAsync(const bool &_flag, Test_boolAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_int8 with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_int8(int8_t _param, CommonAPI::CallStatus &_internalCallStatus, int8_t &_retcode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_int8 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_int8Async(const int8_t &_param, Test_int8AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_int16 with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_int16(int16_t _param, CommonAPI::CallStatus &_internalCallStatus, int16_t &_retcode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_int16 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_int16Async(const int16_t &_param, Test_int16AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_int32 with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_int32(int32_t _param, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retcode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_int32 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_int32Async(const int32_t &_param, Test_int32AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_int64 with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_int64(int64_t _param, CommonAPI::CallStatus &_internalCallStatus, int64_t &_retcode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_int64 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_int64Async(const int64_t &_param, Test_int64AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_uint8 with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_uint8(uint8_t _param, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_retcode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_uint8 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_uint8Async(const uint8_t &_param, Test_uint8AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_uint16 with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_uint16(uint16_t _param, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_retcode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_uint16 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_uint16Async(const uint16_t &_param, Test_uint16AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_uint32 with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_uint32(uint32_t _param, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_retcode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_uint32 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_uint32Async(const uint32_t &_param, Test_uint32AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_uint64 with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_uint64(uint64_t _param, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_retcode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_uint64 with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_uint64Async(const uint64_t &_param, Test_uint64AsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_double with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_double(double _param, CommonAPI::CallStatus &_internalCallStatus, double &_retcode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_double with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_doubleAsync(const double &_param, Test_doubleAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_float with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_float(float _param, CommonAPI::CallStatus &_internalCallStatus, float &_retcode, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_float with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_floatAsync(const float &_param, Test_floatAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf16le_dynamic_length_string with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_utf16le_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf16le_dynamic_length_string with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_utf16le_dynamic_length_stringAsync(const std::string &_param, Test_utf16le_dynamic_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf16be_dynamic_length_string with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_utf16be_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf16be_dynamic_length_string with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_utf16be_dynamic_length_stringAsync(const std::string &_param, Test_utf16be_dynamic_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf8_dynamic_length_string with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_utf8_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf8_dynamic_length_string with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_utf8_dynamic_length_stringAsync(const std::string &_param, Test_utf8_dynamic_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf16le_fixed_length_string with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_utf16le_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf16le_fixed_length_string with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_utf16le_fixed_length_stringAsync(const std::string &_param, Test_utf16le_fixed_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf16be_fixed_length_string with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_utf16be_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf16be_fixed_length_string with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_utf16be_fixed_length_stringAsync(const std::string &_param, Test_utf16be_fixed_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf8_fixed_length_string with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_utf8_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_utf8_fixed_length_string with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_utf8_fixed_length_stringAsync(const std::string &_param, Test_utf8_fixed_length_stringAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_struct with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_struct(TestService::AllPrimitiveDataTypes _request, CommonAPI::CallStatus &_internalCallStatus, TestService::AllPrimitiveDataTypes &_response, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_struct with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_structAsync(const TestService::AllPrimitiveDataTypes &_request, Test_structAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_fixed_length_array with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_fixed_length_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_fixed_length_array with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_fixed_length_arrayAsync(const std::vector< uint32_t > &_param, Test_fixed_length_arrayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_dynamic_length_1_byte_array with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_dynamic_length_1_byte_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_dynamic_length_1_byte_array with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_dynamic_length_1_byte_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_1_byte_arrayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_dynamic_length_2_bytes_array with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_dynamic_length_2_bytes_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_dynamic_length_2_bytes_array with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_dynamic_length_2_bytes_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_2_bytes_arrayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_dynamic_length_4_bytes_array with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_dynamic_length_4_bytes_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_dynamic_length_4_bytes_array with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> test_dynamic_length_4_bytes_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_4_bytes_arrayAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls test_fire_and_forget_uint64 with Fire&Forget semantics.
     *
     * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void test_fire_and_forget_uint64(uint64_t _param, CommonAPI::CallStatus &_internalCallStatus);



 private:
    std::shared_ptr< TestServiceProxyBase> delegate_;
};

typedef TestServiceProxy<> TestServiceProxyDefault;


//
// TestServiceProxy Implementation
//
template <typename ... _AttributeExtensions>
TestServiceProxy<_AttributeExtensions...>::TestServiceProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< TestServiceProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< TestServiceProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
TestServiceProxy<_AttributeExtensions...>::~TestServiceProxy() {
}

template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_bool(bool _flag, CommonAPI::CallStatus &_internalCallStatus, bool &_retflag, const CommonAPI::CallInfo *_info) {
    delegate_->test_bool(_flag, _internalCallStatus, _retflag, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_boolAsync(const bool &_flag, Test_boolAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_boolAsync(_flag, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_int8(int8_t _param, CommonAPI::CallStatus &_internalCallStatus, int8_t &_retcode, const CommonAPI::CallInfo *_info) {
    delegate_->test_int8(_param, _internalCallStatus, _retcode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_int8Async(const int8_t &_param, Test_int8AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_int8Async(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_int16(int16_t _param, CommonAPI::CallStatus &_internalCallStatus, int16_t &_retcode, const CommonAPI::CallInfo *_info) {
    delegate_->test_int16(_param, _internalCallStatus, _retcode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_int16Async(const int16_t &_param, Test_int16AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_int16Async(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_int32(int32_t _param, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retcode, const CommonAPI::CallInfo *_info) {
    delegate_->test_int32(_param, _internalCallStatus, _retcode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_int32Async(const int32_t &_param, Test_int32AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_int32Async(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_int64(int64_t _param, CommonAPI::CallStatus &_internalCallStatus, int64_t &_retcode, const CommonAPI::CallInfo *_info) {
    delegate_->test_int64(_param, _internalCallStatus, _retcode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_int64Async(const int64_t &_param, Test_int64AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_int64Async(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_uint8(uint8_t _param, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_retcode, const CommonAPI::CallInfo *_info) {
    delegate_->test_uint8(_param, _internalCallStatus, _retcode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_uint8Async(const uint8_t &_param, Test_uint8AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_uint8Async(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_uint16(uint16_t _param, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_retcode, const CommonAPI::CallInfo *_info) {
    delegate_->test_uint16(_param, _internalCallStatus, _retcode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_uint16Async(const uint16_t &_param, Test_uint16AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_uint16Async(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_uint32(uint32_t _param, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_retcode, const CommonAPI::CallInfo *_info) {
    delegate_->test_uint32(_param, _internalCallStatus, _retcode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_uint32Async(const uint32_t &_param, Test_uint32AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_uint32Async(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_uint64(uint64_t _param, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_retcode, const CommonAPI::CallInfo *_info) {
    delegate_->test_uint64(_param, _internalCallStatus, _retcode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_uint64Async(const uint64_t &_param, Test_uint64AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_uint64Async(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_double(double _param, CommonAPI::CallStatus &_internalCallStatus, double &_retcode, const CommonAPI::CallInfo *_info) {
    delegate_->test_double(_param, _internalCallStatus, _retcode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_doubleAsync(const double &_param, Test_doubleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_doubleAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_float(float _param, CommonAPI::CallStatus &_internalCallStatus, float &_retcode, const CommonAPI::CallInfo *_info) {
    delegate_->test_float(_param, _internalCallStatus, _retcode, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_floatAsync(const float &_param, Test_floatAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_floatAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_utf16le_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    delegate_->test_utf16le_dynamic_length_string(_param, _internalCallStatus, _reval, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_utf16le_dynamic_length_stringAsync(const std::string &_param, Test_utf16le_dynamic_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_utf16le_dynamic_length_stringAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_utf16be_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    delegate_->test_utf16be_dynamic_length_string(_param, _internalCallStatus, _reval, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_utf16be_dynamic_length_stringAsync(const std::string &_param, Test_utf16be_dynamic_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_utf16be_dynamic_length_stringAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_utf8_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    delegate_->test_utf8_dynamic_length_string(_param, _internalCallStatus, _reval, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_utf8_dynamic_length_stringAsync(const std::string &_param, Test_utf8_dynamic_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_utf8_dynamic_length_stringAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_utf16le_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    delegate_->test_utf16le_fixed_length_string(_param, _internalCallStatus, _reval, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_utf16le_fixed_length_stringAsync(const std::string &_param, Test_utf16le_fixed_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_utf16le_fixed_length_stringAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_utf16be_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    delegate_->test_utf16be_fixed_length_string(_param, _internalCallStatus, _reval, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_utf16be_fixed_length_stringAsync(const std::string &_param, Test_utf16be_fixed_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_utf16be_fixed_length_stringAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_utf8_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    delegate_->test_utf8_fixed_length_string(_param, _internalCallStatus, _reval, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_utf8_fixed_length_stringAsync(const std::string &_param, Test_utf8_fixed_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_utf8_fixed_length_stringAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_struct(TestService::AllPrimitiveDataTypes _request, CommonAPI::CallStatus &_internalCallStatus, TestService::AllPrimitiveDataTypes &_response, const CommonAPI::CallInfo *_info) {
    delegate_->test_struct(_request, _internalCallStatus, _response, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_structAsync(const TestService::AllPrimitiveDataTypes &_request, Test_structAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_structAsync(_request, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_fixed_length_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info) {
    delegate_->test_fixed_length_array(_param, _internalCallStatus, _reval, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_fixed_length_arrayAsync(const std::vector< uint32_t > &_param, Test_fixed_length_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_fixed_length_arrayAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_dynamic_length_1_byte_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info) {
    delegate_->test_dynamic_length_1_byte_array(_param, _internalCallStatus, _reval, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_dynamic_length_1_byte_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_1_byte_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_dynamic_length_1_byte_arrayAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_dynamic_length_2_bytes_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info) {
    delegate_->test_dynamic_length_2_bytes_array(_param, _internalCallStatus, _reval, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_dynamic_length_2_bytes_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_2_bytes_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_dynamic_length_2_bytes_arrayAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_dynamic_length_4_bytes_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info) {
    delegate_->test_dynamic_length_4_bytes_array(_param, _internalCallStatus, _reval, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> TestServiceProxy<_AttributeExtensions...>::test_dynamic_length_4_bytes_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_4_bytes_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->test_dynamic_length_4_bytes_arrayAsync(_param, _callback, _info);
}
template <typename ... _AttributeExtensions>
void TestServiceProxy<_AttributeExtensions...>::test_fire_and_forget_uint64(uint64_t _param, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->test_fire_and_forget_uint64(_param, _internalCallStatus);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &TestServiceProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool TestServiceProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool TestServiceProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& TestServiceProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& TestServiceProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> TestServiceProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace test
} // namespace v0



// Compatibility
namespace v0_1 = v0;

#endif // V0_TEST_Test_Service_PROXY_HPP_
