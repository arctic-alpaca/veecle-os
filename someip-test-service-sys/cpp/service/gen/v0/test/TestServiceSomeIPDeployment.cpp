/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v0/test/TestServiceSomeIPDeployment.hpp>

namespace v0 {
namespace test {
namespace TestService_ {

// Type-specific deployments

// Attribute-specific deployments

// Argument-specific deployment
CommonAPI::SomeIP::StringDeployment test_utf16le_dynamic_length_string_paramDeployment(0, 4, CommonAPI::SomeIP::StringEncoding::UTF16LE);
CommonAPI::SomeIP::StringDeployment test_utf16le_dynamic_length_string_revalDeployment(0, 4, CommonAPI::SomeIP::StringEncoding::UTF16LE);
CommonAPI::SomeIP::StringDeployment test_utf16be_dynamic_length_string_paramDeployment(0, 4, CommonAPI::SomeIP::StringEncoding::UTF16BE);
CommonAPI::SomeIP::StringDeployment test_utf16be_dynamic_length_string_revalDeployment(0, 4, CommonAPI::SomeIP::StringEncoding::UTF16BE);
CommonAPI::SomeIP::StringDeployment test_utf16le_fixed_length_string_paramDeployment(14, 0, CommonAPI::SomeIP::StringEncoding::UTF16LE);
CommonAPI::SomeIP::StringDeployment test_utf16le_fixed_length_string_revalDeployment(14, 0, CommonAPI::SomeIP::StringEncoding::UTF16LE);
CommonAPI::SomeIP::StringDeployment test_utf16be_fixed_length_string_paramDeployment(14, 0, CommonAPI::SomeIP::StringEncoding::UTF16BE);
CommonAPI::SomeIP::StringDeployment test_utf16be_fixed_length_string_revalDeployment(14, 0, CommonAPI::SomeIP::StringEncoding::UTF16BE);
CommonAPI::SomeIP::StringDeployment test_utf8_fixed_length_string_paramDeployment(9, 0, CommonAPI::SomeIP::StringEncoding::UTF8);
CommonAPI::SomeIP::StringDeployment test_utf8_fixed_length_string_revalDeployment(9, 0, CommonAPI::SomeIP::StringEncoding::UTF8);
CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> > test_fixed_length_array_paramDeployment(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), 0, 8, 0);
CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> > test_fixed_length_array_revalDeployment(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), 0, 8, 0);
CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> > test_dynamic_length_1_byte_array_paramDeployment(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), 0, 0, 1);
CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> > test_dynamic_length_1_byte_array_revalDeployment(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), 0, 0, 1);
CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> > test_dynamic_length_2_bytes_array_paramDeployment(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), 0, 0, 2);
CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> > test_dynamic_length_2_bytes_array_revalDeployment(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), 0, 0, 2);

// Broadcast-specific deployments

} // namespace TestService_
} // namespace test
} // namespace v0
