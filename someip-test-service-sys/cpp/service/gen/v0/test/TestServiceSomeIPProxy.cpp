/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v0/test/TestServiceSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace test {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createTestServiceSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< TestServiceSomeIPProxy>(_address, _connection);
}

void initializeTestServiceSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:test.TestService:v0_1:test.TestService",
        0x4d2, 0x162e, 0, 1);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "test.TestService:v0_1",
        &createTestServiceSomeIPProxy);
}

INITIALIZER(registerTestServiceSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeTestServiceSomeIPProxy);
}

TestServiceSomeIPProxy::TestServiceSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection)
{
}

TestServiceSomeIPProxy::~TestServiceSomeIPProxy() {
}



void TestServiceSomeIPProxy::test_bool(bool _flag, CommonAPI::CallStatus &_internalCallStatus, bool &_retflag, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_flag(_flag, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_retflag(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1a6),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_flag,
        _internalCallStatus,
        deploy_retflag);
    _retflag = deploy_retflag.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_boolAsync(const bool &_flag, Test_boolAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_flag(_flag, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_retflag(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1a6),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_flag,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment > _retflag) {
            if (_callback)
                _callback(_internalCallStatus, _retflag.getValue());
        },
        std::make_tuple(deploy_retflag));
}

void TestServiceSomeIPProxy::test_int8(int8_t _param, CommonAPI::CallStatus &_internalCallStatus, int8_t &_retcode, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< int8_t, CommonAPI::SomeIP::IntegerDeployment<int8_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr));
    CommonAPI::Deployable< int8_t, CommonAPI::SomeIP::IntegerDeployment<int8_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int8_t,
                CommonAPI::SomeIP::IntegerDeployment<int8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int8_t,
                CommonAPI::SomeIP::IntegerDeployment<int8_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1a7),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_retcode);
    _retcode = deploy_retcode.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_int8Async(const int8_t &_param, Test_int8AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< int8_t, CommonAPI::SomeIP::IntegerDeployment<int8_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr));
    CommonAPI::Deployable< int8_t, CommonAPI::SomeIP::IntegerDeployment<int8_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<int8_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int8_t,
                CommonAPI::SomeIP::IntegerDeployment<int8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int8_t,
                CommonAPI::SomeIP::IntegerDeployment<int8_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1a7),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int8_t, CommonAPI::SomeIP::IntegerDeployment<int8_t> > _retcode) {
            if (_callback)
                _callback(_internalCallStatus, _retcode.getValue());
        },
        std::make_tuple(deploy_retcode));
}

void TestServiceSomeIPProxy::test_int16(int16_t _param, CommonAPI::CallStatus &_internalCallStatus, int16_t &_retcode, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< int16_t, CommonAPI::SomeIP::IntegerDeployment<int16_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<int16_t>* >(nullptr));
    CommonAPI::Deployable< int16_t, CommonAPI::SomeIP::IntegerDeployment<int16_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<int16_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int16_t,
                CommonAPI::SomeIP::IntegerDeployment<int16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int16_t,
                CommonAPI::SomeIP::IntegerDeployment<int16_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1a8),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_retcode);
    _retcode = deploy_retcode.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_int16Async(const int16_t &_param, Test_int16AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< int16_t, CommonAPI::SomeIP::IntegerDeployment<int16_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<int16_t>* >(nullptr));
    CommonAPI::Deployable< int16_t, CommonAPI::SomeIP::IntegerDeployment<int16_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<int16_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int16_t,
                CommonAPI::SomeIP::IntegerDeployment<int16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int16_t,
                CommonAPI::SomeIP::IntegerDeployment<int16_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1a8),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int16_t, CommonAPI::SomeIP::IntegerDeployment<int16_t> > _retcode) {
            if (_callback)
                _callback(_internalCallStatus, _retcode.getValue());
        },
        std::make_tuple(deploy_retcode));
}

void TestServiceSomeIPProxy::test_int32(int32_t _param, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retcode, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int32_t,
                CommonAPI::SomeIP::IntegerDeployment<int32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int32_t,
                CommonAPI::SomeIP::IntegerDeployment<int32_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1a9),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_retcode);
    _retcode = deploy_retcode.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_int32Async(const int32_t &_param, Test_int32AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<int32_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int32_t,
                CommonAPI::SomeIP::IntegerDeployment<int32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int32_t,
                CommonAPI::SomeIP::IntegerDeployment<int32_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1a9),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int32_t, CommonAPI::SomeIP::IntegerDeployment<int32_t> > _retcode) {
            if (_callback)
                _callback(_internalCallStatus, _retcode.getValue());
        },
        std::make_tuple(deploy_retcode));
}

void TestServiceSomeIPProxy::test_int64(int64_t _param, CommonAPI::CallStatus &_internalCallStatus, int64_t &_retcode, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< int64_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr));
    CommonAPI::Deployable< int64_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int64_t,
                CommonAPI::SomeIP::IntegerDeployment<int64_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int64_t,
                CommonAPI::SomeIP::IntegerDeployment<int64_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1aa),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_retcode);
    _retcode = deploy_retcode.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_int64Async(const int64_t &_param, Test_int64AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< int64_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr));
    CommonAPI::Deployable< int64_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int64_t,
                CommonAPI::SomeIP::IntegerDeployment<int64_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int64_t,
                CommonAPI::SomeIP::IntegerDeployment<int64_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1aa),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< int64_t, CommonAPI::SomeIP::IntegerDeployment<int64_t> > _retcode) {
            if (_callback)
                _callback(_internalCallStatus, _retcode.getValue());
        },
        std::make_tuple(deploy_retcode));
}

void TestServiceSomeIPProxy::test_uint8(uint8_t _param, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_retcode, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1ab),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_retcode);
    _retcode = deploy_retcode.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_uint8Async(const uint8_t &_param, Test_uint8AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint8_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint8_t,
                CommonAPI::SomeIP::IntegerDeployment<uint8_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1ab),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint8_t, CommonAPI::SomeIP::IntegerDeployment<uint8_t> > _retcode) {
            if (_callback)
                _callback(_internalCallStatus, _retcode.getValue());
        },
        std::make_tuple(deploy_retcode));
}

void TestServiceSomeIPProxy::test_uint16(uint16_t _param, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_retcode, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1ac),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_retcode);
    _retcode = deploy_retcode.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_uint16Async(const uint16_t &_param, Test_uint16AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint16_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint16_t,
                CommonAPI::SomeIP::IntegerDeployment<uint16_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1ac),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint16_t, CommonAPI::SomeIP::IntegerDeployment<uint16_t> > _retcode) {
            if (_callback)
                _callback(_internalCallStatus, _retcode.getValue());
        },
        std::make_tuple(deploy_retcode));
}

void TestServiceSomeIPProxy::test_uint32(uint32_t _param, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_retcode, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1ad),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_retcode);
    _retcode = deploy_retcode.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_uint32Async(const uint32_t &_param, Test_uint32AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1ad),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _retcode) {
            if (_callback)
                _callback(_internalCallStatus, _retcode.getValue());
        },
        std::make_tuple(deploy_retcode));
}

void TestServiceSomeIPProxy::test_uint64(uint64_t _param, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_retcode, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint64_t,
                CommonAPI::SomeIP::IntegerDeployment<uint64_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint64_t,
                CommonAPI::SomeIP::IntegerDeployment<uint64_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1ae),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_retcode);
    _retcode = deploy_retcode.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_uint64Async(const uint64_t &_param, Test_uint64AsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_retcode(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint64_t,
                CommonAPI::SomeIP::IntegerDeployment<uint64_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint64_t,
                CommonAPI::SomeIP::IntegerDeployment<uint64_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1ae),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t> > _retcode) {
            if (_callback)
                _callback(_internalCallStatus, _retcode.getValue());
        },
        std::make_tuple(deploy_retcode));
}

void TestServiceSomeIPProxy::test_double(double _param, CommonAPI::CallStatus &_internalCallStatus, double &_retcode, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< double, CommonAPI::EmptyDeployment> deploy_param(_param, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< double, CommonAPI::EmptyDeployment> deploy_retcode(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                double,
                CommonAPI::EmptyDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                double,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1af),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_retcode);
    _retcode = deploy_retcode.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_doubleAsync(const double &_param, Test_doubleAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< double, CommonAPI::EmptyDeployment> deploy_param(_param, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< double, CommonAPI::EmptyDeployment> deploy_retcode(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                double,
                CommonAPI::EmptyDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                double,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1af),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< double, CommonAPI::EmptyDeployment > _retcode) {
            if (_callback)
                _callback(_internalCallStatus, _retcode.getValue());
        },
        std::make_tuple(deploy_retcode));
}

void TestServiceSomeIPProxy::test_float(float _param, CommonAPI::CallStatus &_internalCallStatus, float &_retcode, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_param(_param, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_retcode(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                float,
                CommonAPI::EmptyDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                float,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b0),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_retcode);
    _retcode = deploy_retcode.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_floatAsync(const float &_param, Test_floatAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_param(_param, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< float, CommonAPI::EmptyDeployment> deploy_retcode(static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                float,
                CommonAPI::EmptyDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                float,
                CommonAPI::EmptyDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b0),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< float, CommonAPI::EmptyDeployment > _retcode) {
            if (_callback)
                _callback(_internalCallStatus, _retcode.getValue());
        },
        std::make_tuple(deploy_retcode));
}

void TestServiceSomeIPProxy::test_utf16le_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, &::v0::test::TestService_::test_utf16le_dynamic_length_string_paramDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(&::v0::test::TestService_::test_utf16le_dynamic_length_string_revalDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b2),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_reval);
    _reval = deploy_reval.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_utf16le_dynamic_length_stringAsync(const std::string &_param, Test_utf16le_dynamic_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, &::v0::test::TestService_::test_utf16le_dynamic_length_string_paramDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(&::v0::test::TestService_::test_utf16le_dynamic_length_string_revalDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b2),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _reval) {
            if (_callback)
                _callback(_internalCallStatus, _reval.getValue());
        },
        std::make_tuple(deploy_reval));
}

void TestServiceSomeIPProxy::test_utf16be_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, &::v0::test::TestService_::test_utf16be_dynamic_length_string_paramDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(&::v0::test::TestService_::test_utf16be_dynamic_length_string_revalDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b3),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_reval);
    _reval = deploy_reval.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_utf16be_dynamic_length_stringAsync(const std::string &_param, Test_utf16be_dynamic_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, &::v0::test::TestService_::test_utf16be_dynamic_length_string_paramDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(&::v0::test::TestService_::test_utf16be_dynamic_length_string_revalDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b3),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _reval) {
            if (_callback)
                _callback(_internalCallStatus, _reval.getValue());
        },
        std::make_tuple(deploy_reval));
}

void TestServiceSomeIPProxy::test_utf8_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b4),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_reval);
    _reval = deploy_reval.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_utf8_dynamic_length_stringAsync(const std::string &_param, Test_utf8_dynamic_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b4),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _reval) {
            if (_callback)
                _callback(_internalCallStatus, _reval.getValue());
        },
        std::make_tuple(deploy_reval));
}

void TestServiceSomeIPProxy::test_utf16le_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, &::v0::test::TestService_::test_utf16le_fixed_length_string_paramDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(&::v0::test::TestService_::test_utf16le_fixed_length_string_revalDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b5),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_reval);
    _reval = deploy_reval.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_utf16le_fixed_length_stringAsync(const std::string &_param, Test_utf16le_fixed_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, &::v0::test::TestService_::test_utf16le_fixed_length_string_paramDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(&::v0::test::TestService_::test_utf16le_fixed_length_string_revalDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b5),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _reval) {
            if (_callback)
                _callback(_internalCallStatus, _reval.getValue());
        },
        std::make_tuple(deploy_reval));
}

void TestServiceSomeIPProxy::test_utf16be_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, &::v0::test::TestService_::test_utf16be_fixed_length_string_paramDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(&::v0::test::TestService_::test_utf16be_fixed_length_string_revalDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b6),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_reval);
    _reval = deploy_reval.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_utf16be_fixed_length_stringAsync(const std::string &_param, Test_utf16be_fixed_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, &::v0::test::TestService_::test_utf16be_fixed_length_string_paramDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(&::v0::test::TestService_::test_utf16be_fixed_length_string_revalDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b6),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _reval) {
            if (_callback)
                _callback(_internalCallStatus, _reval.getValue());
        },
        std::make_tuple(deploy_reval));
}

void TestServiceSomeIPProxy::test_utf8_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, &::v0::test::TestService_::test_utf8_fixed_length_string_paramDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(&::v0::test::TestService_::test_utf8_fixed_length_string_revalDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b7),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_reval);
    _reval = deploy_reval.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_utf8_fixed_length_stringAsync(const std::string &_param, Test_utf8_fixed_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_param(_param, &::v0::test::TestService_::test_utf8_fixed_length_string_paramDeployment);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deploy_reval(&::v0::test::TestService_::test_utf8_fixed_length_string_revalDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b7),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > _reval) {
            if (_callback)
                _callback(_internalCallStatus, _reval.getValue());
        },
        std::make_tuple(deploy_reval));
}

void TestServiceSomeIPProxy::test_struct(TestService::AllPrimitiveDataTypes _request, CommonAPI::CallStatus &_internalCallStatus, TestService::AllPrimitiveDataTypes &_response, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< TestService::AllPrimitiveDataTypes, ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t> deploy_request(_request, static_cast< ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t* >(nullptr));
    CommonAPI::Deployable< TestService::AllPrimitiveDataTypes, ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t> deploy_response(static_cast< ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                TestService::AllPrimitiveDataTypes,
                ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                TestService::AllPrimitiveDataTypes,
                ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b1),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_request,
        _internalCallStatus,
        deploy_response);
    _response = deploy_response.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_structAsync(const TestService::AllPrimitiveDataTypes &_request, Test_structAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< TestService::AllPrimitiveDataTypes, ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t> deploy_request(_request, static_cast< ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t* >(nullptr));
    CommonAPI::Deployable< TestService::AllPrimitiveDataTypes, ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t> deploy_response(static_cast< ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                TestService::AllPrimitiveDataTypes,
                ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                TestService::AllPrimitiveDataTypes,
                ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b1),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_request,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< TestService::AllPrimitiveDataTypes, ::v0::test::TestService_::AllPrimitiveDataTypesDeployment_t > _response) {
            if (_callback)
                _callback(_internalCallStatus, _response.getValue());
        },
        std::make_tuple(deploy_response));
}

void TestServiceSomeIPProxy::test_fixed_length_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_param(_param, &::v0::test::TestService_::test_fixed_length_array_paramDeployment);
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_reval(&::v0::test::TestService_::test_fixed_length_array_revalDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b9),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_reval);
    _reval = deploy_reval.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_fixed_length_arrayAsync(const std::vector< uint32_t > &_param, Test_fixed_length_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_param(_param, &::v0::test::TestService_::test_fixed_length_array_paramDeployment);
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_reval(&::v0::test::TestService_::test_fixed_length_array_revalDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b9),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> > > _reval) {
            if (_callback)
                _callback(_internalCallStatus, _reval.getValue());
        },
        std::make_tuple(deploy_reval));
}

void TestServiceSomeIPProxy::test_dynamic_length_1_byte_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_param(_param, &::v0::test::TestService_::test_dynamic_length_1_byte_array_paramDeployment);
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_reval(&::v0::test::TestService_::test_dynamic_length_1_byte_array_revalDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1ba),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_reval);
    _reval = deploy_reval.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_dynamic_length_1_byte_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_1_byte_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_param(_param, &::v0::test::TestService_::test_dynamic_length_1_byte_array_paramDeployment);
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_reval(&::v0::test::TestService_::test_dynamic_length_1_byte_array_revalDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1ba),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> > > _reval) {
            if (_callback)
                _callback(_internalCallStatus, _reval.getValue());
        },
        std::make_tuple(deploy_reval));
}

void TestServiceSomeIPProxy::test_dynamic_length_2_bytes_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_param(_param, &::v0::test::TestService_::test_dynamic_length_2_bytes_array_paramDeployment);
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_reval(&::v0::test::TestService_::test_dynamic_length_2_bytes_array_revalDeployment);
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1bb),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_reval);
    _reval = deploy_reval.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_dynamic_length_2_bytes_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_2_bytes_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_param(_param, &::v0::test::TestService_::test_dynamic_length_2_bytes_array_paramDeployment);
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_reval(&::v0::test::TestService_::test_dynamic_length_2_bytes_array_revalDeployment);
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1bb),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> > > _reval) {
            if (_callback)
                _callback(_internalCallStatus, _reval.getValue());
        },
        std::make_tuple(deploy_reval));
}

void TestServiceSomeIPProxy::test_dynamic_length_4_bytes_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_param(_param, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >* >(nullptr));
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_reval(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1bc),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        _internalCallStatus,
        deploy_reval);
    _reval = deploy_reval.getValue();
}

std::future<CommonAPI::CallStatus> TestServiceSomeIPProxy::test_dynamic_length_4_bytes_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_4_bytes_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_param(_param, static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >* >(nullptr));
    CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> deploy_reval(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< uint32_t >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> >
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1bc),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_param,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< std::vector< uint32_t >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::IntegerDeployment<uint32_t> > > _reval) {
            if (_callback)
                _callback(_internalCallStatus, _reval.getValue());
        },
        std::make_tuple(deploy_reval));
}

void TestServiceSomeIPProxy::test_fire_and_forget_uint64(uint64_t _param, CommonAPI::CallStatus &_internalCallStatus) {
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deploy_param(_param, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint64_t,
                CommonAPI::SomeIP::IntegerDeployment<uint64_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethod(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1b8),
        false,
        false,
        deploy_param,
        _internalCallStatus);
}

void TestServiceSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

std::future<void> TestServiceSomeIPProxy::getCompletionFuture() {
    return CommonAPI::SomeIP::Proxy::getCompletionFuture();
}

} // namespace test
} // namespace v0
