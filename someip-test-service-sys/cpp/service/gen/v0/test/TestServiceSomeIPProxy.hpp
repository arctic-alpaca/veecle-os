/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.15.v202410041637.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V0_TEST_TEST_SERVICE_SOMEIP_PROXY_HPP_
#define V0_TEST_TEST_SERVICE_SOMEIP_PROXY_HPP_

#include <v0/test/TestServiceProxyBase.hpp>
#include <v0/test/TestServiceSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v0 {
namespace test {

class TestServiceSomeIPProxy
    : virtual public TestServiceProxyBase,
      virtual public CommonAPI::SomeIP::Proxy {
public:
    TestServiceSomeIPProxy(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~TestServiceSomeIPProxy();

    virtual void test_bool(bool _flag, CommonAPI::CallStatus &_internalCallStatus, bool &_retflag, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_boolAsync(const bool &_flag, Test_boolAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_int8(int8_t _param, CommonAPI::CallStatus &_internalCallStatus, int8_t &_retcode, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_int8Async(const int8_t &_param, Test_int8AsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_int16(int16_t _param, CommonAPI::CallStatus &_internalCallStatus, int16_t &_retcode, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_int16Async(const int16_t &_param, Test_int16AsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_int32(int32_t _param, CommonAPI::CallStatus &_internalCallStatus, int32_t &_retcode, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_int32Async(const int32_t &_param, Test_int32AsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_int64(int64_t _param, CommonAPI::CallStatus &_internalCallStatus, int64_t &_retcode, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_int64Async(const int64_t &_param, Test_int64AsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_uint8(uint8_t _param, CommonAPI::CallStatus &_internalCallStatus, uint8_t &_retcode, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_uint8Async(const uint8_t &_param, Test_uint8AsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_uint16(uint16_t _param, CommonAPI::CallStatus &_internalCallStatus, uint16_t &_retcode, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_uint16Async(const uint16_t &_param, Test_uint16AsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_uint32(uint32_t _param, CommonAPI::CallStatus &_internalCallStatus, uint32_t &_retcode, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_uint32Async(const uint32_t &_param, Test_uint32AsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_uint64(uint64_t _param, CommonAPI::CallStatus &_internalCallStatus, uint64_t &_retcode, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_uint64Async(const uint64_t &_param, Test_uint64AsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_double(double _param, CommonAPI::CallStatus &_internalCallStatus, double &_retcode, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_doubleAsync(const double &_param, Test_doubleAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_float(float _param, CommonAPI::CallStatus &_internalCallStatus, float &_retcode, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_floatAsync(const float &_param, Test_floatAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_utf16le_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_utf16le_dynamic_length_stringAsync(const std::string &_param, Test_utf16le_dynamic_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_utf16be_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_utf16be_dynamic_length_stringAsync(const std::string &_param, Test_utf16be_dynamic_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_utf8_dynamic_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_utf8_dynamic_length_stringAsync(const std::string &_param, Test_utf8_dynamic_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_utf16le_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_utf16le_fixed_length_stringAsync(const std::string &_param, Test_utf16le_fixed_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_utf16be_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_utf16be_fixed_length_stringAsync(const std::string &_param, Test_utf16be_fixed_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_utf8_fixed_length_string(std::string _param, CommonAPI::CallStatus &_internalCallStatus, std::string &_reval, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_utf8_fixed_length_stringAsync(const std::string &_param, Test_utf8_fixed_length_stringAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_struct(TestService::AllPrimitiveDataTypes _request, CommonAPI::CallStatus &_internalCallStatus, TestService::AllPrimitiveDataTypes &_response, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_structAsync(const TestService::AllPrimitiveDataTypes &_request, Test_structAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_fixed_length_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_fixed_length_arrayAsync(const std::vector< uint32_t > &_param, Test_fixed_length_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_dynamic_length_1_byte_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_dynamic_length_1_byte_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_1_byte_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_dynamic_length_2_bytes_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_dynamic_length_2_bytes_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_2_bytes_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_dynamic_length_4_bytes_array(std::vector< uint32_t > _param, CommonAPI::CallStatus &_internalCallStatus, std::vector< uint32_t > &_reval, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> test_dynamic_length_4_bytes_arrayAsync(const std::vector< uint32_t > &_param, Test_dynamic_length_4_bytes_arrayAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void test_fire_and_forget_uint64(uint64_t _param, CommonAPI::CallStatus &_internalCallStatus);

    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

    virtual std::future<void> getCompletionFuture();

private:

};

} // namespace test
} // namespace v0

#endif // V0_TEST_Test_Service_SOMEIP_PROXY_HPP_
