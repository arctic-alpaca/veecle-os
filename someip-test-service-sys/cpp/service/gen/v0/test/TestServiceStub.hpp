/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.15.v202410041619.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_TEST_Test_Service_STUB_HPP_
#define V0_TEST_Test_Service_STUB_HPP_

#include <functional>
#include <sstream>




#include <v0/test/TestService.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <vector>


#include <CommonAPI/Stub.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace test {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service TestService. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class TestServiceStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual TestService {
 public:


    virtual void deactivateManagedInstances() = 0;


protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for TestService.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TestServiceStubRemoteEvent
{
public:
    virtual ~TestServiceStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service TestService to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class TestServiceStub
    : public virtual CommonAPI::Stub<TestServiceStubAdapter, TestServiceStubRemoteEvent>
{
public:
    typedef std::function<void (bool _retflag)> test_boolReply_t;
    typedef std::function<void (int8_t _retcode)> test_int8Reply_t;
    typedef std::function<void (int16_t _retcode)> test_int16Reply_t;
    typedef std::function<void (int32_t _retcode)> test_int32Reply_t;
    typedef std::function<void (int64_t _retcode)> test_int64Reply_t;
    typedef std::function<void (uint8_t _retcode)> test_uint8Reply_t;
    typedef std::function<void (uint16_t _retcode)> test_uint16Reply_t;
    typedef std::function<void (uint32_t _retcode)> test_uint32Reply_t;
    typedef std::function<void (uint64_t _retcode)> test_uint64Reply_t;
    typedef std::function<void (double _retcode)> test_doubleReply_t;
    typedef std::function<void (float _retcode)> test_floatReply_t;
    typedef std::function<void (std::string _reval)> test_utf16le_dynamic_length_stringReply_t;
    typedef std::function<void (std::string _reval)> test_utf16be_dynamic_length_stringReply_t;
    typedef std::function<void (std::string _reval)> test_utf8_dynamic_length_stringReply_t;
    typedef std::function<void (std::string _reval)> test_utf16le_fixed_length_stringReply_t;
    typedef std::function<void (std::string _reval)> test_utf16be_fixed_length_stringReply_t;
    typedef std::function<void (std::string _reval)> test_utf8_fixed_length_stringReply_t;
    typedef std::function<void (TestService::AllPrimitiveDataTypes _response)> test_structReply_t;
    typedef std::function<void (std::vector< uint32_t > _reval)> test_fixed_length_arrayReply_t;
    typedef std::function<void (std::vector< uint32_t > _reval)> test_dynamic_length_1_byte_arrayReply_t;
    typedef std::function<void (std::vector< uint32_t > _reval)> test_dynamic_length_2_bytes_arrayReply_t;
    typedef std::function<void (std::vector< uint32_t > _reval)> test_dynamic_length_4_bytes_arrayReply_t;

    virtual ~TestServiceStub() {}
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }
    bool hasElement(const uint32_t _id) const {
        return (_id < 23);
    }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// This is the method that will be called on remote calls on the method test_bool.
    virtual void test_bool(const std::shared_ptr<CommonAPI::ClientId> _client, bool _flag, test_boolReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_int8.
    virtual void test_int8(const std::shared_ptr<CommonAPI::ClientId> _client, int8_t _param, test_int8Reply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_int16.
    virtual void test_int16(const std::shared_ptr<CommonAPI::ClientId> _client, int16_t _param, test_int16Reply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_int32.
    virtual void test_int32(const std::shared_ptr<CommonAPI::ClientId> _client, int32_t _param, test_int32Reply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_int64.
    virtual void test_int64(const std::shared_ptr<CommonAPI::ClientId> _client, int64_t _param, test_int64Reply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_uint8.
    virtual void test_uint8(const std::shared_ptr<CommonAPI::ClientId> _client, uint8_t _param, test_uint8Reply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_uint16.
    virtual void test_uint16(const std::shared_ptr<CommonAPI::ClientId> _client, uint16_t _param, test_uint16Reply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_uint32.
    virtual void test_uint32(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _param, test_uint32Reply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_uint64.
    virtual void test_uint64(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _param, test_uint64Reply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_double.
    virtual void test_double(const std::shared_ptr<CommonAPI::ClientId> _client, double _param, test_doubleReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_float.
    virtual void test_float(const std::shared_ptr<CommonAPI::ClientId> _client, float _param, test_floatReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_utf16le_dynamic_length_string.
    virtual void test_utf16le_dynamic_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf16le_dynamic_length_stringReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_utf16be_dynamic_length_string.
    virtual void test_utf16be_dynamic_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf16be_dynamic_length_stringReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_utf8_dynamic_length_string.
    virtual void test_utf8_dynamic_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf8_dynamic_length_stringReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_utf16le_fixed_length_string.
    virtual void test_utf16le_fixed_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf16le_fixed_length_stringReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_utf16be_fixed_length_string.
    virtual void test_utf16be_fixed_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf16be_fixed_length_stringReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_utf8_fixed_length_string.
    virtual void test_utf8_fixed_length_string(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _param, test_utf8_fixed_length_stringReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_struct.
    virtual void test_struct(const std::shared_ptr<CommonAPI::ClientId> _client, TestService::AllPrimitiveDataTypes _request, test_structReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_fixed_length_array.
    virtual void test_fixed_length_array(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< uint32_t > _param, test_fixed_length_arrayReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_dynamic_length_1_byte_array.
    virtual void test_dynamic_length_1_byte_array(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< uint32_t > _param, test_dynamic_length_1_byte_arrayReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_dynamic_length_2_bytes_array.
    virtual void test_dynamic_length_2_bytes_array(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< uint32_t > _param, test_dynamic_length_2_bytes_arrayReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_dynamic_length_4_bytes_array.
    virtual void test_dynamic_length_4_bytes_array(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< uint32_t > _param, test_dynamic_length_4_bytes_arrayReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method test_fire_and_forget_uint64.
    virtual void test_fire_and_forget_uint64(const std::shared_ptr<CommonAPI::ClientId> _client, uint64_t _param) = 0;


    using CommonAPI::Stub<TestServiceStubAdapter, TestServiceStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<TestServiceStubAdapter, TestServiceStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<TestServiceStubAdapter, TestServiceStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef TestServiceStubRemoteEvent RemoteEventType;
    typedef ::v0::test::TestService StubInterface;
};

} // namespace test
} // namespace v0


// Compatibility
namespace v0_1 = v0;

#endif // V0_TEST_Test_Service_STUB_HPP_
